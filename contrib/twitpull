#!/bin/sh

# twitpull - get anything from the Twitter API as plain text
#
# Usage:
#
#     twitpull [-f CREDS] [-j FILTER] [-n] [-p] [-s] [-v] RESOURCE [PARAMS...]
#
# This script no longer has any knowledge of the Twitter data model; you
# provide an arbitrary resource and what to do with it.
#
# RESOURCE must be the name of a 1.1 REST API resource (no leading / or
# .json extension). Parameters may be specified as additional arguments.
#
# Options:
#
#     If you need to specify credentials, -f will be passed along to
#     Curlicue.
#
#     The response will be passed through `jq -r`; -j FILTER will
#     override the default filter of '.' which will print the entire
#     response.
#
#     If -n or -p are given, only make a single request; otherwise, use
#     a cursor to list the entire resource in multiple requests. If -p
#     is given, make a POST request.
#
#     If -s is given, check the rate limit status before making requests
#     and sleep if necessary.
#
#     If -v is given, echo URLs and parameters to stderr before
#     requesting them.
#
# Examples:
#
#     # Read the latest tweets in your home timeline, formatted nicely
#     twitpull -n -j '.[] | "<\(.user.screen_name)>\t\(.text)"' statuses/home_timeline
#
#     # List the names of all accounts @twitterapi is following
#     twitpull -j '.users[].screen_name' friends/list screen_name=twitterapi
#
# Copyright Â© 2014 Decklin Foster <decklin@red-bean.com>; distributed
# under the same license as Curlicue.

api_root='https://api.twitter.com/1.1'
creds="$HOME/.curlicue/api.twitter.com"
filter='.'
method=GET
while getopts 'f:j:npsv' opt; do
    case "$opt" in
        f) creds="$OPTARG";;
        j) filter="$OPTARG";;
        n) no_cursor=1;;
        p) method=POST; no_cursor=1;;
        s) sleep=1;;
        v) verbose=1;;
        *) echo "Unknown option: $opt"; exit 2;;
    esac
done; shift $(($OPTIND-1))

get_rate_limit() {
    local resource="$1"; shift
    raw_request GET application/rate_limit_status |
        jq -r '.resources | add | .["/'"$resource"'"] | "\(.remaining) \(.limit) \(.reset)"'
}

request() {
    local resource="$1"; shift
    local params="$1" # optional
    if test -n "$sleep"; then
        get_rate_limit "$resource" | while read remaining limit reset; do
            until_reset="$(($reset - $(date +%s)))"
            if test "$remaining" -lt 1; then
                delay="$(($until_reset + 2))"
            elif test "$remaining" -lt "$limit"; then
                delay="$(($until_reset / ($remaining + 1) + 1))"
            else
                delay=0
            fi
            test -n "$verbose" && printf '%s... ' "sleeping: $delay at $(date +%X) for $resource ($remaining/$limit, $until_reset)" 1>&2
            sleep "$delay"
        done
    fi
    test -n "$verbose" && echo "requesting: $method $resource" ${params:+"with params $params"} 1>&2
    raw_request "$method" "$resource" "$params"
}

raw_request() {
    local method="$1"; shift
    local resource="$1"; shift
    local params="$1" # optional
    local url="$api_root/$resource.json"
    case "$method" in
        GET) curlicue -f "$creds" -- -s "$url${params:+?$params}";;
        POST) curlicue -f "$creds" -- -s -d "$params" "$url";;
    esac
}

resource="$1"; shift
params="$(curl-encode "$@")"

if test -n "$no_cursor"; then
    request "$resource" "$params" | jq -r "$filter"
else
    temp="$(mktemp -t twitpull.XXXXXX)"; trap "rm -f '$temp'" EXIT
    cursor='-1'
    while test -n "$cursor" -a "$cursor" != 0; do
        request "$resource" "cursor=$cursor${params:+&$params}" > "$temp" || break
        jq -r "$filter" < "$temp"
        cursor=$(jq -r '.next_cursor_str' < "$temp")
        if test "$cursor" = 'null'; then
            echo "error: could not find cursor in response: $(cat "$temp")" 1>&2
            break
        fi
    done
fi
