#!/bin/sh

# twitpull - get anything from the Twitter API as plain text
#
# Usage:
#     twitpull [-f CREDS] [-j FILTER] [-n] [-v] RESOURCE [PARAMS...]
#
# This script no longer has any knowledge of the Twitter data model; you
# provide an arbitrary resource and what to do with it.
#
# RESOURCE must be the name of a 1.1 REST API resource (no leading / or
# .json extension). Parameters may be specified as additional arguments.
#
# The response will be passed through `jq -r`; -j FILTER will override
# the default filter of '.' which will print the entire response.
#
# -f will be passed along to Curlicue. If -n is given, only make a
# single request; otherwise, use a cursor to list the entire resource in
# multiple requests. If -v is given, echo URLs to stderr before fetching
# them.
#
# Examples:
#     # Read the latest tweets in your home timeline, formatted nicely
#     twitpull -n -j '.[] | "<\(.user.screen_name)>\t\(.text)"' statuses/home_timeline
#     # List the names of all accounts @twitterapi is following
#     twitpull -j '.users[].screen_name' friends/list screen_name=twitterapi
#
# Copyright Â© 2014 Decklin Foster <decklin@red-bean.com>; distributed
# under the same license as Curlicue.

api_root='https://api.twitter.com/1.1'
creds="$HOME/.curlicue/api.twitter.com"
filter='.'
while getopts 'f:j:nv' opt; do
    case "$opt" in
        f) creds="$OPTARG";;
        j) filter="$OPTARG";;
        n) no_cursor=1;;
        v) verbose=1;;
        *) echo "Unknown option: $opt"; exit 2;;
    esac
done; shift $(($OPTIND-1))

curlicue_fetch() {
    local url="$1"; shift
    test -n "$verbose" && echo "fetching: $url" 1>&2
    curlicue -f "$creds" -- -s "$url"
}

get_resource() {
    local url="$1"; shift
    local params="$1"; shift
    if test -n "$no_cursor"; then
        curlicue_fetch "$url${params:+?$params}" | jq -r "$filter"
    else
        temp="$(mktemp -t twitpull.XXXXXX)"; trap "rm -f '$temp'" EXIT
        cursor='-1'
        while test -n "$cursor" -a "$cursor" != 0; do
            curlicue_fetch "$url?cursor=$cursor${params:+&$params}" > "$temp" || break
            jq -r "$filter" < "$temp"
            cursor=$(jq -r '.next_cursor_str' < "$temp")
            if test "$cursor" = 'null'; then
                echo "error: could not find cursor in response: $(cat "$temp")" 1>&2
                break
            fi
        done
    fi
}

resource="$1"; shift
get_resource "$api_root/$resource.json" "$(curl-encode "$@")"
