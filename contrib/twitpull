#!/bin/sh

# twitpull - get anything from the Twitter API as plain text
#
# Usage:
#     twitpull [-f CREDS] [-n] [-v] RESOURCE JQ_FILTER [PARAMS]
#
# This script no longer has any knowledge of the Twitter data model; you
# provide an arbitrary resource and what to do with it.
#
# RESOURCE should be a resource of the 1.1 REST API (.json extension not
# necessary, URL-encoded query string allowed) and JQ_FILTER should be a
# jq filter which produces strings. More query parameters can be
# specified as additional arguments.
#
# -f will be passed along to Curlicue. If -n is given, only make a
# single request; otherwise, use a cursor to list the entire resource in
# multiple requests. If -v is given, echo URLs to stderr before fetching
# them.
#
# Examples:
#     # Read the latest tweets in your home timeline, formatted nicely
#     twitpull -n /statuses/home_timeline '.[] | "<" + .user.screen_name + ">\t" + .text'
#     # List the names of all accounts @twitterapi is following
#     twitpull /friends/list '.users[].screen_name' screen_name=twitterapi
#
# Copyright Â© 2014 Decklin Foster <decklin@red-bean.com>; distributed
# under the same license as Curlicue.

API_ROOT="https://api.twitter.com/1.1"
CREDS="$HOME/.curlicue/api.twitter.com"

curlicue_fetch() {
    local url="$1"; shift
    test -n "$VERBOSE" && echo "fetching: $url" 1>&2
    curlicue -f "$CREDS" -- -s "$url"
}

get_resource() {
    local url="$1"; shift
    local filter="$1"; shift
    local params="$1"; shift
    if test -n "$NO_CURSOR"; then
        curlicue_fetch "$url${params:+?$params}" | jq -r "$filter"
    else
        temp="$(mktemp -t twitpull.XXXXXX)"; trap "rm -f '$temp'" EXIT
        cursor='-1'
        while test -n "$cursor" -a "$cursor" != 0; do
            curlicue_fetch "$url?cursor=$cursor${params:+&$params}" > "$temp" || break
            jq -r "$filter" < "$temp"
            cursor=$(jq -r '.next_cursor_str' < "$temp")
            if test "$cursor" = 'null'; then
                echo "error: could not find cursor in response: $(cat "$temp")" 1>&2
                break
            fi
        done
    fi
}

while getopts 'f:nv' opt; do
    case "$opt" in
        f) CREDS="$OPTARG";;
        n) NO_CURSOR=1;;
        v) VERBOSE=1;;
        *) echo "Unknown option: $opt"; exit 2;;
    esac
done
shift $(($OPTIND-1))

resource="$1"; shift
filter="$1"; shift

case "$resource" in
    *\?*) params="${resource#*\?}"; resource="${resource%%\?*}";;
esac

for param; do
    params="${params:+$params&}$param"
done

get_resource "$API_ROOT${resource%.json}.json" "$filter" "$params"
